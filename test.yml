swagger: '2.0'
info:
  version: 1.0.0
  title: irapi
basePath: /api
paths:
  '/devices/{id}/messages/{fk}':
    get:
      tags:
        - device
      summary: Find a related item by id for messages.
      operationId: device.prototype.__findById__messages
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for messages
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/message'
      deprecated: false
    delete:
      tags:
        - device
      summary: Delete a related item by id for messages.
      operationId: device.prototype.__destroyById__messages
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for messages
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - device
      summary: Update a related item by id for messages.
      operationId: device.prototype.__updateById__messages
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for messages
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/message'
      deprecated: false
  '/devices/{id}/user':
    get:
      tags:
        - device
      summary: Fetches belongsTo relation user.
      operationId: device.prototype.__get__user
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/devices/{id}/messages':
    get:
      tags:
        - device
      summary: Queries messages of device.
      operationId: device.prototype.__get__messages
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/message'
      deprecated: false
    post:
      tags:
        - device
      summary: Creates a new instance in messages of this model.
      operationId: device.prototype.__create__messages
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/message'
      deprecated: false
    delete:
      tags:
        - device
      summary: Deletes all messages of this model.
      operationId: device.prototype.__delete__messages
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/devices/{id}/messages/count':
    get:
      tags:
        - device
      summary: Counts messages of device.
      operationId: device.prototype.__count__messages
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /devices:
    post:
      tags:
        - device
      summary: Create a new instance of the model and persist it into the data source.
      operationId: device.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/device'
      deprecated: false
    get:
      tags:
        - device
      summary: Find all instances of the model matched by filter from the data source.
      operationId: device.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/device'
      deprecated: false
  '/devices/{id}':
    get:
      tags:
        - device
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: device.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/device'
      deprecated: false
    delete:
      tags:
        - device
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: device.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - device
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: device.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: device id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/device'
      deprecated: false
  /devices/count:
    get:
      tags:
        - device
      summary: Count instances of the model matched by where from the data source.
      operationId: device.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/messages/{id}':
    patch:
      tags:
        - message
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: message.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: message id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/message'
      deprecated: false
  '/accessTokens/{id}/user':
    get:
      tags:
        - accessToken
      summary: Fetches belongsTo relation user.
      operationId: accessToken.prototype.__get__user
      parameters:
        - name: id
          in: path
          description: accessToken id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /accessTokens:
    post:
      tags:
        - accessToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: accessToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    patch:
      tags:
        - accessToken
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: accessToken.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    put:
      tags:
        - accessToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: accessToken.replaceOrCreate__put_accessTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    get:
      tags:
        - accessToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: accessToken.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/accessToken'
      deprecated: false
  /accessTokens/replaceOrCreate:
    post:
      tags:
        - accessToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: accessToken.replaceOrCreate__post_accessTokens_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  /accessTokens/upsertWithWhere:
    post:
      tags:
        - accessToken
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: accessToken.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  '/accessTokens/{id}/exists':
    get:
      tags:
        - accessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'accessToken.exists__get_accessTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/accessTokens/{id}':
    head:
      tags:
        - accessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'accessToken.exists__head_accessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - accessToken
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: accessToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    put:
      tags:
        - accessToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'accessToken.replaceById__put_accessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - accessToken
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: accessToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - accessToken
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: accessToken.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: accessToken id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  '/accessTokens/{id}/replace':
    post:
      tags:
        - accessToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'accessToken.replaceById__post_accessTokens_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  /accessTokens/findOne:
    get:
      tags:
        - accessToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: accessToken.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  /accessTokens/update:
    post:
      tags:
        - accessToken
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: accessToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /accessTokens/count:
    get:
      tags:
        - accessToken
      summary: Count instances of the model matched by where from the data source.
      operationId: accessToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /accessTokens/change-stream:
    post:
      tags:
        - accessToken
      summary: Create a change stream.
      operationId: accessToken.createChangeStream__post_accessTokens_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - accessToken
      summary: Create a change stream.
      operationId: accessToken.createChangeStream__get_accessTokens_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/users/{id}/accessTokens/{fk}':
    get:
      tags:
        - user
      summary: Find a related item by id for accessTokens.
      operationId: user.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - user
      summary: Delete a related item by id for accessTokens.
      operationId: user.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - user
      summary: Update a related item by id for accessTokens.
      operationId: user.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  '/users/{id}/identities/{fk}':
    get:
      tags:
        - user
      summary: Find a related item by id for identities.
      operationId: user.prototype.__findById__identities
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for identities
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    delete:
      tags:
        - user
      summary: Delete a related item by id for identities.
      operationId: user.prototype.__destroyById__identities
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for identities
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - user
      summary: Update a related item by id for identities.
      operationId: user.prototype.__updateById__identities
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for identities
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
  '/users/{id}/credentials/{fk}':
    get:
      tags:
        - user
      summary: Find a related item by id for credentials.
      operationId: user.prototype.__findById__credentials
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - user
      summary: Delete a related item by id for credentials.
      operationId: user.prototype.__destroyById__credentials
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - user
      summary: Update a related item by id for credentials.
      operationId: user.prototype.__updateById__credentials
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  '/users/{id}/accessTokens':
    get:
      tags:
        - user
      summary: Queries accessTokens of user.
      operationId: user.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/accessToken'
      deprecated: false
    post:
      tags:
        - user
      summary: Creates a new instance in accessTokens of this model.
      operationId: user.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/accessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - user
      summary: Deletes all accessTokens of this model.
      operationId: user.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/accessTokens/count':
    get:
      tags:
        - user
      summary: Counts accessTokens of user.
      operationId: user.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/users/{id}/identities':
    get:
      tags:
        - user
      summary: Queries identities of user.
      operationId: user.prototype.__get__identities
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserIdentity'
      deprecated: false
    post:
      tags:
        - user
      summary: Creates a new instance in identities of this model.
      operationId: user.prototype.__create__identities
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    delete:
      tags:
        - user
      summary: Deletes all identities of this model.
      operationId: user.prototype.__delete__identities
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/identities/count':
    get:
      tags:
        - user
      summary: Counts identities of user.
      operationId: user.prototype.__count__identities
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/users/{id}/credentials':
    get:
      tags:
        - user
      summary: Queries credentials of user.
      operationId: user.prototype.__get__credentials
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserCredential'
      deprecated: false
    post:
      tags:
        - user
      summary: Creates a new instance in credentials of this model.
      operationId: user.prototype.__create__credentials
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - user
      summary: Deletes all credentials of this model.
      operationId: user.prototype.__delete__credentials
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/credentials/count':
    get:
      tags:
        - user
      summary: Counts credentials of user.
      operationId: user.prototype.__count__credentials
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /users:
    post:
      tags:
        - user
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    get:
      tags:
        - user
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}':
    get:
      tags:
        - user
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: user.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - user
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: user.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - user
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: user.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/count:
    get:
      tags:
        - user
      summary: Count instances of the model matched by where from the data source.
      operationId: user.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /users/login:
    post:
      tags:
        - user
      summary: Login a user with username/email and password.
      operationId: user.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: |+
              応答本文には、ログイン時に作成された AccessToken のプロパティーが含まれます。
              `include` パラメーターの値によっては、本文に追加のプロパティーが含まれる場合があります:

                - `user` - `U+007BUserU+007D` - 現在ログインしているユーザーのデータ。 (`include=user`)

            type: object
      deprecated: false
  /users/logout:
    post:
      tags:
        - user
      summary: Logout a user with access token.
      operationId: user.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/verify':
    post:
      tags:
        - user
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: user.prototype.verify
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/change-password:
    post:
      tags:
        - user
      summary: Change a user's password.
      operationId: user.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/reset-password:
    post:
      tags:
        - user
      summary: Reset user's password via a password-reset token.
      operationId: user.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
tags:
  - name: device
  - name: message
  - name: accessToken
  - name: user
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  message:
    properties:
      name:
        type: string
      data:
        type: array
        items:
          $ref: '#/definitions/x-any'
      id:
        type: number
        format: double
      deviceId:
        type: number
        format: double
    required:
      - name
      - data
    additionalProperties: false
  user:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  device:
    properties:
      name:
        type: string
      serial:
        type: string
      id:
        type: number
        format: double
      ownerId:
        type: number
        format: double
    required:
      - name
      - serial
    additionalProperties: false
  accessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  UserIdentity:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
      userId:
        type: number
        format: double
    additionalProperties: false
  UserCredential:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
      userId:
        type: number
        format: double
    additionalProperties: false
